{"version":3,"sources":["../src/rethinkdb-database.js"],"names":["promise","connect","fn","Promise","resolve","reject","options","RethinkDBQuery","params","Array","isArray","args","findManyById","id","findById","databases","models","r","rethinkdb","TABLE","table","run","then","response","catch","error","query","obj","get","getAll","map","i","RethinkDBMutation","insert","console","log","err","delete","__result","deleted","update"],"mappings":"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","file":"rethinkdb-database.js","sourcesContent":["import rethinkdbdash from 'rethinkdbdash';\nimport autobind from 'class-autobind';\n\nexport function promise (fn) {\n  return new Promise((resolve, reject) => fn(resolve, reject));\n}\n\nexport function connect (options) {\n  return rethinkdbdash(options);\n}\n\nexport class RethinkDBQuery {\n  constructor () {\n    autobind(this);\n  }\n\n  resolve (params) {\n    return Array.isArray(params.args)\n      ? this.findManyById({ ...params, args: { id: params.args } })\n      : this.findById(params);\n  }\n\n  findAll ({ args, databases, models }) {\n    const r = databases.rethinkdb;\n    const TABLE = this.table;\n    return promise((resolve, reject) => {\n      r\n        .table(TABLE)\n        .run()\n        .then(response => {\n          resolve(response);\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n\n  findById ({ query, args, databases, models }) {\n    const r = databases.rethinkdb;\n    let obj = args || query;\n    const TABLE = this.table;\n\n    return promise((resolve, reject) => {\n      r\n        .table(TABLE)\n        .get(obj.id)\n        .run()\n        .then(response => {\n          resolve(response);\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n\n  findManyById ({ query, args, databases, models }) {\n    const r = databases.rethinkdb;\n    let obj = args || query;\n    const TABLE = this.table;\n\n    return promise((resolve, reject) => {\n      r\n        .table(TABLE)\n        .getAll(...obj.map(i => i.id))\n        .run()\n        .then(response => {\n          resolve(response);\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n}\n\nexport class RethinkDBMutation {\n  constructor () {\n    autobind(this);\n  }\n\n  create ({ args, databases, models }) {\n    const r = databases.rethinkdb;\n    const TABLE = this.table;\n\n    return promise((resolve, reject) => {\n      r\n        .table(TABLE)\n        .insert(args)\n        .run()\n        .then(response => {\n          resolve(response);\n        })\n        .error(err => {\n          console.log('Error occurred inserting data into tables.', err);\n          reject(err);\n        });\n    });\n  }\n\n  remove ({ args, databases, models }) {\n    const r = databases.rethinkdb;\n    const id = args.id;\n    const TABLE = this.table;\n\n    return promise((resolve, reject) => {\n      r\n        .table(TABLE)\n        .getAll(id)\n        .delete()\n        .run()\n        .then(response => {\n          const __result = response.deleted === 1 ? 'success' : 'failed';\n\n          resolve({ __result });\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n\n  update ({ args, databases, models }) {\n    const r = databases.rethinkdb;\n    const id = args.id;\n    const TABLE = this.table;\n\n    return promise((resolve, reject) => {\n      r\n        .table(TABLE)\n        .get(id)\n        .update(args)\n        .run()\n        .then(response => {\n          resolve();\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n\n  // createMany\n  // deleteMany\n  // removeMany\n  // updateMany\n}\n"]}